// the NODE_ENV env variables should be defined before the node process is started; 
// if not defined we use the following defaults;
process.env.NODE_ENV = process.env.NODE_ENV || "dev";

console.log("process.env.NODE_ENV: ", process.env.NODE_ENV);

// the above env variables must be defined before the config module is first required
var Path = require("path");
var Config = require("config");
var Hoek = require("hoek");
var Glue = require("glue");
var Boom = require("boom")
var Utils = require("./common/utils");
var Seneca = require("./common/seneca");

internals = {};

internals.validUser = Config.get("user");
internals.validPassword = Config.get("password");

var manifest = {

    server: {
        //  default connections configuration
        connections: {

            // controls how incoming request URIs are matched against the routing table
            router: {
                isCaseSensitive: false,
                stripTrailingSlash: true
            },

            // default configuration for every route.
            routes: {
                state: {
                    // determines how to handle cookie parsing errors ("ignore" = take no action)
                    failAction: "ignore"
                },

                // disable node socket timeouts (useful for debugging)
                timeout: {
                    server: false,
                    socket: false
                }
            }
        },

    },

    connections: [
        {
            host: "localhost",
            port: Config.get("port")
        }
    ],

    plugins: [
        {
            "good": {
                reporters: [{
                    reporter: require("good-console"),
                    events: {
                        //ops: "*",
                        log: "*", // maps to the "log" event 
                        response: "*", // maps to either the "response" or "tail" event
                        error: "*", // maps to the "request-error" event
                        request: "*" // maps to the hapi "request" event (generated by request.log())
                    }
                }]
            }
        },

        {
            "blipp": {
                showAuth: true
            }
        },

        {
            "inert": {

            }
        },

        // dependencies: ["inert"]
        {
            "./routes-static": {

            }
        },

        {
            "vision": {

            }
        },

        {
            "tv": {
                host: Config.get("publicIp"),
                port: 6002
            }
        },

        {
            "hapi-auth-cookie": {

            }
        },

        // dependencies: ["hapi-auth-cookie"]
        {
            "./hapi-auth-session-memory": {
                loginPath: "/login",
                logoutPath: "/logout",
                successRedirectTo: "/dashboard",
                validateLoginData: function(request, next){
debugger;
                    var authFailed;
                    var user = request.payload.user, password = request.payload.password;

                    //    Possible reasons for a failed authentication
                    //     - "missing username or password" (won't even connect to the DB)
                    //     - "username does not exist" 
                    //     - "wrong password" (username exists but password doesn't match)
                    
                    if (!user || !password) {
                        authFailed = "missing";
                    }
                    else if(user.toLowerCase() !== internals.validUser.toLowerCase()){
                        authFailed = "unknown-user";
                    }
                    else if(password.toLowerCase() !== internals.validPassword.toLowerCase()){
                        authFailed = "wrong-password";
                    }

                    if(authFailed){
                        return next(Boom.unauthorized("/login?auth-fail-reason=" + authFailed));
                    }

                    // if we arrive here, the username and password match
                    var loginData = {
                        user: user
                    };

                    return next(undefined, loginData);
                },

                // strategy options - see hapi-auth-cookie and the options to server.auth.strategy
                // in the main docs; if some option is not given, the defaults will be used
                ironPassword: Config.get("ironPassword"),
                isSecure: false,
                clearInvalid: true,
                appendNext: true,
                redirectOnTry: true,
                //ttl: internals["3 hours"],
            }
        },

        // dependencies: ["hapi-auth-session-memory"]
        {   
            "./web": {

            }
        },

        // dependencies: ["hapi-auth-session-memory"]
        {
            "./routes-login": {

            }
        },

        {   
            "./api": {
            }
        }

    ]
};

// TODO: remove good console if not in production
// TODO: migrato to hapi 9
var options = {
    relativeTo: __dirname,
    prePlugins: function(server, next){
        next();
    }
};

Glue.compose(manifest, options, function (err, server) {

    Hoek.assert(!err, 'Failed registration of one or more plugins: ' + err);

    Utils.configureNunjucks2(server);

    // start the server and finish the initialization process
    server.start(function(err) {

        Hoek.assert(!err, 'Failed start server: ' + err);

        Utils.registerServer(server);

        
        console.log('Server started at: ' + server.info.uri);
        console.log("Hapi version: " + server.version);
    });
});
/*
*/
